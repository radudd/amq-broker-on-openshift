# Cert-manager must be installed
# Route name should be filled out
# In this example, self-signed certificates are used
# Doc: https://docs.redhat.com/en/documentation/red_hat_amq_broker/7.12/html/deploying_amq_broker_on_openshift/assembly-br-configuring-operator-based-deployments_broker-ocp#proc-br-securing-client-connections-certmanager_broker-ocp

# Cluster Issuer to be used to create RootCA
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: root-issuer
spec:
  selfSigned: {}

# Create RootCA certificate
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: root-ca
  namespace: cert-manager
spec:
  isCA: true
  commonName: "amq.io.root"
  secretName: root-ca-secret
  subject:
    organizations:
    - "www.amq.io"
  issuerRef:
    name: root-issuer
    kind: ClusterIssuer

# Define CA issuer for issuing certificates that are signed by the root CA
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: root-ca-issuer
spec:
  ca:
    secretName: root-ca-secret

# Define broker certificate: should include both routes and K8s service names
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: broker-cert
  namespace: amqbroker-dev
spec:
  commonName: amq.io
  dnsNames:
    # Route which is externally accessible. It can be generated by the Operator, or it can be manually created
    - dev-amqp-0-svc-rte-amqbroker-dev.apps.$CLUSTER_URL
    - dev-amqp-1-svc-rte-amqbroker-dev.apps.$CLUSTER_URL
    - dev-openwire-0-svc-rte-amqbroker-dev.$CLUSTER_URL
    - dev-openwire-1-svc-rte-amqbroker-dev.$CLUSTER_URL
    # Services dedicated per broker instance
    - dev-ss-0.dev-hdls-svc.amqbroker-dev.svc.cluster.local
    - dev-ss-1.dev-hdls-svc.amqbroker-dev.svc.cluster.local
  isCA: false
  issuerRef:
    kind: ClusterIssuer
    name: root-ca-issuer
  secretName: broker-cert-secret
  subject:
    organizations:
      - www.amq.io